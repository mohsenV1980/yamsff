Yet another MPLS stack for FreeBSD (yamsff)
===========================================

This software is derived from MPLS implementation in OpenBSD 4.7 release.
     
Ongoing operational tasks:
--------------------------
 
 o Testing components and bugfixes (or refactoring some parts).
 o Review of ifconfig(8) and bugfixes (or refactoring some parts).
 o Adding modefied netstat(8) command.
 o Writing detailed implementation notes.
 o Starting of tasks for IPv6 integration.
 o Manual pages and misc. documentation.
 o Fixes targeting my bad orthography.

Additional information about contacting
---------------------------------------
      
If someone wants to contact me by electronic mail, please use encryption.

-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

mQGiBFWePMgRBAC6W4aGo1ppG3ZFL1lVKNHxSwsP0NEKl3nl2lPyveLkwFEFeEYu
H7zfsqkmcHK1CpuFha3GaqS2OIciFxsVEB62ikjum4hPCWa/iw+Y0EOYmcoDDLmX
2FRIoPrbbJ0V5jEktrRKNnS5nvywIDLh+ORGnq0aws8usSs/ySSQ6PuQJwCg2j0t
7AlAnn3OuCYcv0GsimRdFZMD/1OPAVtY1mVB+Vrd0H1wLzLDdFS6Vx4O6rViwP0N
5s1KRhqoMll1S3EQC/lhAu+s9b50owDSUGCiXHfpbyB7iUISFlAOV9QQ4afd6ae0
RlpIu482PnrdfVSJEEQDBDj/BpSVAFK6H03Pl78E+b0l9cWuzeYqrEf9sfF8OH8j
mK9LA/9RYdyHGVUaBFIOuoQkAyKT7CyJggVmuO6C5Y3tTDTAc/w+pw/2uI0kYOpQ
CC4ndyhRG3FU4aNOTaPc1PF5uYIrEHUyEnfFkyULAMYfn9p36Blnqo5zh/YjVL69
3CVg4ctv7ZmQePyToD+C48xY4YTGu6Gf8XjUfCATz+teMd7u2rRHSGVubmluZyBN
YXR5c2Nob2sgKEtvbW1lbnRhci4pIDxoZW5uaW5nLm1hdHlzY2hva0BzdHVkLmZo
LWZsZW5zYnVyZy5kZT6IYAQTEQIAIAUCVZ48yAIbAwYLCQgHAwIEFQIIAwQWAgMB
Ah4BAheAAAoJEG5NpFEQWRHK724AniVS+UsNSrAg0/mQkf9Fll7x07zNAJ9CMB97
aDCoGpagfg3sXvs2au/3jrkCDQRVnjzIEAgApaGHl4vvyPGy0nOI1hbQ4p3nM5+S
sWl/uxp2alXacRlKYkHkD8RsR5lJRjG17tuLpiogHYhTt8ijRplwCp2b2FTRq8aF
ULTewRkjOVamVjtnaa5lQ0/Z3QH+f5BK5dcboZHJlQg/+LOgFNpVF/nUaTF+jfVs
DnZVLUhJeY+LYpcw60NEu9yiUWxMD/944xoXC+uVb1ihsDxVSFgpFFjhpkN0Bcg9
aii6o3Eyhqr4dKZsc52p/NmZWPtMxOaPYqYPBZOgs69JedL6zAdAwel9sNJ0aaJy
F4bRvQfy5tryhy5j83MSQ/594l1nGCvUHvYez5sddHkyDjWy4FqYm5SCwwADBgf9
EpPcdF7F+OckvlJ1BbjtufOayORknIKSMrbfD2tj88brp9awl77Yw4iKegfSyw/p
vCvyrjyZiy729lVlvv8jah3oISx+jcfpSgB1QnXHhWz1vDkgc66nn7trXgAlHoH0
TdaAzOMtu59vgcQe8FbBwLOI90DjNnuwbwRw0nXvRxiJCQd5aiYb2LRjlvo+6L3T
J8fJirqBjmFzGpcH1haZo1GYGmr5MsUJMEpwxr77YKBji32ca/V1uyBko/DbZrW7
oUAYr+GawaCwb13Y8CsyFl3FAWRVBYJ0Y1iO/3W2QpGLcpitcnKxrnCFFYSbLsoc
+6qGvUjOSFvHUtDajNoIfYhJBBgRAgAJBQJVnjzIAhsMAAoJEG5NpFEQWRHKZrEA
n0Bj9G0snst74mnx/jvBuoQQZKtjAKCd8pZpq2rFKgCrJp+BjXpDfetMMw==
=SMc1
-----END PGP PUBLIC KEY BLOCK-----

Our world is not a (so called) "Ponyhof", yeah. :-).

Implementation notes
====================

NOTE: This software and its components are under active developement and far
NOTE: from correctness and containing (some serious) flaws implecitely.
NOTE:        
NOTE: Purpose of this operation is to teach myself about MPLS for a better 
NOTE: understanding.   
NOTE: 
NOTE: Please contact me (see above) and help me, if I've applied copyright 
NOTE: notices linked with my name on files in this repository in a wrong way. 
NOTE:
NOTE: I am inexperienced and I will avoid any trouble about licensing issues.   
NOTE:        
NOTE: Stern warning: Do not use this software in production environments!

Directory structure
-------------------

Due to simplicity I've integrated the AF_MPLS domain into sys directory.

    /conf/       Extended configuration files.
   
    /sbin/       Extended system commands (User space).
   
                  (a) ifconfig(8)
                 
                  (b) route(8)

    /sys/        Kernel sources.

                 net/        
                 
                  Extensions for inclusion mapping in AF_MPLS domain on         
                  interface layer.
   
                  if.c      
                            
                            Generic ifnet(9) implementation.

                             (a) ifhwioctl, enabling / disabling IFF_MPLS
                                 by SIOCSIFFLAGS command.

                             (b) if_purgeaddrs, calls mpls_purgaddrs.

                  if.h      
                            Defined flags maps on link layer and 
                            on AF_MPLS domain.
                 
                             (a) IFF_VETHER, denotes if_vether(4).
 
                             (b) IFF_MPLS, enables inclusion mapping 
                                 from interface in AF_MPLS domain.        
                            
                             (c) IFF_MPE, MPLS label binding maps to
                                 interface, aggregate set of routes.
                             
                  if_bridge.c
                  
                            Inspection Access Point (iap) was extended.
                             
                             (a) Inspecting frames carrying rfc-2516
                                 Service Data Units (sdu).
                                 
                             (b) Inspecting frames originating AF_MPLS. 
                              
                            Only by frames containing IPv[4|6] datagrams  
                            are processed by pfil(9).  
                              
                  if_bridgevar.h
                  
                            Definition of mbuf_tags(9) for caching 
                            Protocol Control Information (pci) on 
                            both cases as described as above. 
                  
                  if_ethersubr.c
                  
                             (a) Handoff decapsulated sdu by netisr(9) during
                                 ether_demux.
                             
                             (b) Resoluton by mpls_arpresolve 
                                 during ether_output.
                             
                             (c) SIOCSIFADDR invokes mpls_arp_ifinit 
                                 during ether_ioctl.
                  
                  if_fddisubr.c
                  
                             (a) Handoff decapsulated sdu by netisr(9) 
                                 during fddi_input.
                             
                             (b) Resoluton by mpls_arpresolve 
                                 during fddi_output.
                             
                             (c) SIOCSIFADDR invokes mpls_arp_ifinit 
                                 during fddi_ioctl.
                  
                  if_llatbl.c          
                             
                            Llatbl_lle_show dumps intire ARP cache
                            residing in AF_MPLS domain.
                      
                  if_loop.c
                     
                            Loopback of MPLS Protocol Data Units (pdu)
                            into AF_MPLS domain by if_simloop. 
                                       
                  if_mpe.c
                  
                            Implementation of generic interface still capable
                            operating as MPLS Provider Edge for OSI-L2/VPN in
                            conjunction with instance of if_bridge(4) as its
                            member.
                            
                            The implementation is derived from implementation 
                            in OpenBSD 4.7 release. 
                            
                  if_vether.c
                  
                            Port from implementation of if_vether(4), where 
                            it is implementetd in OpenBSD 4.7 release.
                            
                  route.c
                  
                             (a) Lookup of Incoming Label Map (ilm) on RADIX 
                                 Trie in AF_MPLS domain by rtalloc_fib1(9). 
                  
                             (b) Lookup for x-connect by ifa_ifwithroute_fib
                                 as precondition for generating by Next Hop
                                 Label Forwarding Entry (nhlfe) covered ilm.
                                
                             (c) Creation or deletion of ilm by 
                                 rtrequest1_fib(9). 
                  
                  rtsock.c

                             (a) Accessing AF_MPLS domain by mpls_rt_output
                                 during rt_output in AF_ROUTE domain.

                             (b) Proxyfied creation or deletion of nhlfe by 
                                 mpls_newaddrmsg during control oprations
                                 in AF_MPLS domain
       
                 netgraph/   
                 
                  Integration of if_vether(4) in AF_NETGRAPH domain.
                  
                  ng_ether.c
                  
                            Any mbuf(9) passing ng_ether_rcv_lower 
                            will be annotated by M_PROTO2 flag, if
                            IFF_VETHER exists on interface.            
           
                 netinet/   
                 
                  Integration of AF_MPLS domain into address resolution code.
                  
                  if_ether.c
                  
                            Implements Service Access Point (sap) for 
                            handoff mbuf(9) containing MPLS_ARP sdu 
                            into AF_MPLS domain.                 
                 
                 netmpls/
                  
                  Implementation of AF_MPLS domain.   
                  
                  mpls.c

                            By ioctl(2) accessible generic control operations.
                            
                             (a) MPLS label assignement / removal scoped
                                 on interface layer (aggregate set of 
                                 routes).
                                 
                             (b) Attachment / detachement of link layer
                                 interfaces on instances of if_mpe(4).
                                 
                            ARP cache implementation in AF_MPLS domain.  

                  mpls.h
                  
                            Interface specification for accessing AF_MPLS
                            domain. 
                            
                            XXX: Internal order and structure of this .h 
                            XXX: is wrong.
                            XXX:
                            XXX: I'll externalize components into mpls_var.h.
                  
                  mpls_arp.c
                  
                            Implementation of MPLS_ARP protocol and access 
                            to protocol layer specific link layer address 
                            resolution code, if MPLS_ARP is disabled.  
                               
                  mpls_input.c
                  
                            Implementation of input processing, handoff
                            into service requesting operating system 
                            layer, forwarding and exception handling.
                             
                  mpls_output.c
                  
                            Implementation of output processing.
                  
                  mpls_proto.c
                  
                            Implementation of AF_MPLS domain.
                            
                  mpls_raw.c

                            Implementation of raw socket for accessing 
                            control operations in AF_MPLS domain.
                  
                  mpls_rmx.c
                  
                            Implementation of RADIX trie containing by nhlfe
                            covered ilm in AF_MPLS domain.
                            
                            Further, ctor and dtor for by Forward Equivalence
                            Class (fec) covered nhlfe are implented here.
                  
                  mpls_rtalert.c
                  
                            Implementation of raw socket processing pdu 
                            with MPLS_RTALERT pci.
                  
                  mpls_shim.c
                  
                            Kernel Programming Interface (kpi) for 
                            generating or manipulating MPLS labeled
                            pdu.
                 
How to install?
---------------                

Necessary precondition is a workstation running at least FreeBSD 10.1-RELEASE.
                 
 1. Create directory for containment of entire source tree.
 
     (a) mkdir -p /usr/src                          
                 
 2. Fetch this repository into former created directory. 
 
     (a) cd /usr/src
 
     (b) git clone https://github.com/hmatyschok/yamms .
    
 
 3. Install source code distribution shipped with installation media, i. e. 
    stored as image file in /tmp. 
    
     (a) cd  /
    
     (b) mdconfig -t vnode -f /tmp/FreeBSD-10.1-RELEASE-<arch>-disc1.iso
    
     (c) mount_cd9660 /dev/md0 /mnt     
                     
     (d) tar xfk /mnt/usr/freebsd-dist/src.txz     
                 
     (e) umount /mnt
    
     (f) mdconfig -d -u 0
                  
           ... to be continued.                 
                             


