Yet another MPLS stack for FreeBSD (yamsff)
===========================================

This software is derived from present MPLS implementation in current OpenBSD
release.
     
Ongoing operational tasks:
--------------------------
 
 o Testing components and bugfixes (or refactoring some parts).
 o Review of ifconfig(8) and bugfixes (or refactoring some parts).
 o Adding modefied netstat(8) command.
 o Writing detailed implementation notes.
 o Starting of tasks for IPv6 integration.

Additional information about contacting
---------------------------------------
      
If someone wants to contact me by electronic mail, please use encryption.

-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

mQGiBFWePMgRBAC6W4aGo1ppG3ZFL1lVKNHxSwsP0NEKl3nl2lPyveLkwFEFeEYu
H7zfsqkmcHK1CpuFha3GaqS2OIciFxsVEB62ikjum4hPCWa/iw+Y0EOYmcoDDLmX
2FRIoPrbbJ0V5jEktrRKNnS5nvywIDLh+ORGnq0aws8usSs/ySSQ6PuQJwCg2j0t
7AlAnn3OuCYcv0GsimRdFZMD/1OPAVtY1mVB+Vrd0H1wLzLDdFS6Vx4O6rViwP0N
5s1KRhqoMll1S3EQC/lhAu+s9b50owDSUGCiXHfpbyB7iUISFlAOV9QQ4afd6ae0
RlpIu482PnrdfVSJEEQDBDj/BpSVAFK6H03Pl78E+b0l9cWuzeYqrEf9sfF8OH8j
mK9LA/9RYdyHGVUaBFIOuoQkAyKT7CyJggVmuO6C5Y3tTDTAc/w+pw/2uI0kYOpQ
CC4ndyhRG3FU4aNOTaPc1PF5uYIrEHUyEnfFkyULAMYfn9p36Blnqo5zh/YjVL69
3CVg4ctv7ZmQePyToD+C48xY4YTGu6Gf8XjUfCATz+teMd7u2rRHSGVubmluZyBN
YXR5c2Nob2sgKEtvbW1lbnRhci4pIDxoZW5uaW5nLm1hdHlzY2hva0BzdHVkLmZo
LWZsZW5zYnVyZy5kZT6IYAQTEQIAIAUCVZ48yAIbAwYLCQgHAwIEFQIIAwQWAgMB
Ah4BAheAAAoJEG5NpFEQWRHK724AniVS+UsNSrAg0/mQkf9Fll7x07zNAJ9CMB97
aDCoGpagfg3sXvs2au/3jrkCDQRVnjzIEAgApaGHl4vvyPGy0nOI1hbQ4p3nM5+S
sWl/uxp2alXacRlKYkHkD8RsR5lJRjG17tuLpiogHYhTt8ijRplwCp2b2FTRq8aF
ULTewRkjOVamVjtnaa5lQ0/Z3QH+f5BK5dcboZHJlQg/+LOgFNpVF/nUaTF+jfVs
DnZVLUhJeY+LYpcw60NEu9yiUWxMD/944xoXC+uVb1ihsDxVSFgpFFjhpkN0Bcg9
aii6o3Eyhqr4dKZsc52p/NmZWPtMxOaPYqYPBZOgs69JedL6zAdAwel9sNJ0aaJy
F4bRvQfy5tryhy5j83MSQ/594l1nGCvUHvYez5sddHkyDjWy4FqYm5SCwwADBgf9
EpPcdF7F+OckvlJ1BbjtufOayORknIKSMrbfD2tj88brp9awl77Yw4iKegfSyw/p
vCvyrjyZiy729lVlvv8jah3oISx+jcfpSgB1QnXHhWz1vDkgc66nn7trXgAlHoH0
TdaAzOMtu59vgcQe8FbBwLOI90DjNnuwbwRw0nXvRxiJCQd5aiYb2LRjlvo+6L3T
J8fJirqBjmFzGpcH1haZo1GYGmr5MsUJMEpwxr77YKBji32ca/V1uyBko/DbZrW7
oUAYr+GawaCwb13Y8CsyFl3FAWRVBYJ0Y1iO/3W2QpGLcpitcnKxrnCFFYSbLsoc
+6qGvUjOSFvHUtDajNoIfYhJBBgRAgAJBQJVnjzIAhsMAAoJEG5NpFEQWRHKZrEA
n0Bj9G0snst74mnx/jvBuoQQZKtjAKCd8pZpq2rFKgCrJp+BjXpDfetMMw==
=SMc1
-----END PGP PUBLIC KEY BLOCK-----

Our world is not a (so called) "Ponyhof", yeah. :-).

Implementation notes
====================

NOTE:	This software and its components are under active developement and far
NOTE: 	from correctness and containing (some serious) flaws implecitely.
NOTE: 	
NOTE: 	Purpose of this operation is to teach myself about MPLS for a better 
NOTE:   understanding.   
NOTE: 	
NOTE: 	Stern warning: Do not use this software in production environments!

Directory structure
-------------------

    /conf/		Extended configuration files.
   
	/sbin/		Extended system commands (User space).
   
                 (a) ifconfig(8)
                 
                 (b) route(8)

	/sys/		Kernel sources.

   				net/      Extensions for inclusion mapping in AF_MPLS
   				          domain on interface layer.
   
     			  if.c      
     			            Generic ifnet(9) implementation.

                             (a) ifhwioctl, enabling / disabling IFF_MPLS
                                 by SIOCSIFFLAGS command.

                             (b) if_purgeaddrs, calls mpls_purgaddrs.

                  if.h      
                            Defined flags maps to link layer and 
                            inclusion mapping in AF_MPLS domain.
                 
                             (a) IFF_VETHER, denotes if_vether(4).
 
                             (b) IFF_MPLS, enables inclusion mapping 
                                 from interface in AF_MPLS domain.        
                            
                             (c) IFF_MPE, MPLS label binding maps to
                                 interface, aggregate set of routes.
                             
                  if_bridge.c
                  
                            Inspection Access Point (iap) was extended.
                             
                             (a) Inspecting frames carrying rfc-2516
                                 Service Data Units (sdu).
                                 
                             (b) Inspecting frames originating AF_MPLS. 
                              
                            Only by frames containing IPv[4|6] datagrams  
                            are processed by pfil(9).  
                              
                  if_bridgevar.h
                  
                            Definition of mbuf_tags(9) for caching 
                            Protocol Control Information (pci) on 
                            both cases as described above. 
                  
                  if_ethersubr.c
                  
                             (a) Sdu handoff by netisr(9) during
                                 ether_demux.
                             
                             (b) Resoluton by mpls_arpresolve 
                                 during ether_output.
                             
                             (c) SIOCSIFADDR invokes mpls_arp_ifinit 
                                 during ether_ioctl.
                  
                  if_fddisubr.c
                  
                             (a) Sdu handoff by netisr(9) during
                                 fddi_input.
                             
                             (b) Resoluton by mpls_arpresolve 
                                 during fddi_output.
                             
                             (c) SIOCSIFADDR invokes mpls_arp_ifinit 
                                 during fddi_ioctl.
                  
                  if_llatbl.c          
                             
                             (a) llatbl_lle_show dumps MPLS_ARP cache.
                                       
                  if_mpe.c
                  
                            Implementation of generic interface still capable
                            operating as MPLS Provider Edge for OSI-L2/VPN in
                            conjunction with instance of if_bridge(4) as its
                            member.
                            
                            Implementaion is derived from implementation by
                            the OpenBSD project. 
                            
                  if_vether.c
                  
                            Port from implementation of if_vether(4), where 
                            it is implementetd by the OpenBSD project.           
                            
                  route.c
                  
                            (a) Lookup of Incoming Label Map (ilm) on RADIX 
                                Trie in AF_MPLS domain by rtalloc_fib1(9). 
                  
                            (b) Lookup for x-connect by ifa_ifwithroute_fib
                                as precondition for generating by Next Hop
                                Label Forwarding Entry (nhlfe) covered ilm.
                                
                            (c) Creation or deletion of ilm by 
                                rtrequest1_fib(9). 
                  
                  rtsock.c

                            (a) Accessing AF_MPLS domain by mpls_rt_output
                                during rt_output in AF_ROUTE domain.

                            (b) Proxyfied creation or deletion of nhlfe by 
                                mpls_newaddrmsg during control oprations
                                in AF_MPLS domain
           
           ... to be continued.                 
                             

